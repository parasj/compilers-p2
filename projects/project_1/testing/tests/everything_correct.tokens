let type cat:id := int ; type dog:id := cat:id ; type int_arr:id := array [ 100:intlit ] of int ; var u:id : unit ; var a:id : int ; var b:id : int ; var doge:id : dog:id ; var meow:id : cat:id ; var c:id : float ; var d:id : int_arr:id ; var e:id : int := 7:intlit ; var f:id : cat:id := 7:intlit ; var g:id : int_arr:id := 89:intlit ; var i:id : int ; func add:id ( addend1:id : int , addend2:id : int ) : int begin return addend1:id + addend2:id ; end ; func nada:id ( hola:id : int ) : unit begin hola:id := 1:intlit ; end ; func broken1:id ( ) : int begin if 1:intlit > 2:intlit then return 1:intlit ; endif ; end ; in d:id := 78:intlit ; a:id := 1:intlit ; b:id := 2:intlit ; u:id := nada:id ( 7:intlit ) ; u:id := broken1:id ( ) ; u:id := add:id ( 1:intlit , b:id ) ; a:id := 2:intlit ; a:id := add:id ( a:id , b:id ) ; a:id := ( a:id + 3:intlit ) * 2:intlit ; d:id [ a:id ] := d:id [ 3:intlit ] ; d:id [ d:id [ 3:intlit ] ] := b:id ; d:id := 3:intlit ; if a:id > b:id then a:id := 3:intlit ; b:id := 5:intlit ; else a:id := 2:intlit ; if a:id < b:id then b:id := 4:intlit ; endif ; endif ; while a:id <> 1:intlit do a:id := 1:intlit ; enddo ; for a:id := 1:intlit to 5:intlit do d:id [ a:id ] := 1:intlit ; while 1:intlit = 1:intlit do break ; enddo ; i:id := 101:intlit ; enddo ; i:id := 595:intlit ; end