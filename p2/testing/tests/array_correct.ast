(program let (declseg (typedecls (typedecl type arrayint := (type array [ 100 ] of (type int)) ;) typedecls) (vardecls (vardecl var (ids x , (ids y)) : (type arrayint) (optinit := (const 10)) ;) (vardecls (vardecl var (ids i , (ids sum)) : (type int) (optinit := (const 0)) ;) (vardecls (vardecl var (ids u) : (type unit) optinit ;) vardecls))) funcdecls) in (stmts (fullstmt (stmt for i := (expr (clause (pred (aexpr (term (factor (const 1))))))) to (expr (clause (pred (aexpr (term (factor (const 100))))))) do (stmts (fullstmt (stmt (lvalue sum optoffset) := (expr (clause (pred (aexpr (aexpr (term (factor sum))) (linop +) (term (term (factor x [ (expr (clause (pred (aexpr (term (factor i)))))) ])) (nonlinop *) (factor y [ (expr (clause (pred (aexpr (term (factor i)))))) ]))))))) ;)) enddo) ;) (stmts (fullstmt (stmt (lvalue u optoffset) := (expr (clause (pred (aexpr (term (factor printi ( (exprs (neexprs (expr (clause (pred (aexpr (term (factor sum)))))))) )))))))) ;))) end)