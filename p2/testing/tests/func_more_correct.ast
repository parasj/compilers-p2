(program let (declseg typedecls (vardecls (vardecl var (ids a , (ids w , (ids x , (ids y , (ids z))))) : (type int) optinit ;) (vardecls (vardecl var (ids b , (ids c , (ids d , (ids e , (ids f))))) : (type float) optinit ;) vardecls)) (funcdecls (funcdecl func twicef ( (params (neparams (param n : (type float)))) ) : (type float) begin (stmts (fullstmt (stmt return (expr (clause (pred (aexpr (aexpr (term (factor n))) (linop +) (term (factor n))))))) ;)) end ;) (funcdecls (funcdecl func twiced ( (params (neparams (param n : (type int)))) ) : (type int) begin (stmts (fullstmt (stmt return (expr (clause (pred (aexpr (aexpr (term (factor n))) (linop +) (term (factor n))))))) ;)) end ;) funcdecls))) in (stmts (fullstmt (stmt (lvalue a optoffset) := (expr (clause (pred (aexpr (term (factor twiced ( (exprs (neexprs (expr (clause (pred (aexpr (term (factor (const 7))))))))) )))))))) ;)) end)